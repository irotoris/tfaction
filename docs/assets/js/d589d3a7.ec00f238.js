"use strict";(self.webpackChunktfaction=self.webpackChunktfaction||[]).push([[7162],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(r),f=n,d=c["".concat(s,".").concat(f)]||c[f]||m[f]||o;return r?a.createElement(d,i(i({ref:t},p),{},{components:r})):a.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9390:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:150},i="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Create a repository from this template repository",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/tfaction/docs/getting-started",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/tfaction-docs/edit/main/docs/getting-started.md",tags:[],version:"current",sidebarPosition:150,frontMatter:{sidebar_position:150},sidebar:"tutorialSidebar",previous:{title:"tfaction",permalink:"/tfaction/docs/"},next:{title:"Support Monorepo with GitHub Actions build matrix",permalink:"/tfaction/docs/feature/build-matrix"}},s={},u=[{value:"Create required resources with Terraform",id:"create-required-resources-with-terraform",level:2},{value:"Create a GitHub App",id:"create-a-github-app",level:2},{value:"Fix the template and tfaction-root.yaml and workflows",id:"fix-the-template-and-tfaction-rootyaml-and-workflows",level:2},{value:"Scaffold a working directory",id:"scaffold-a-working-directory",level:2},{value:"Create a pull request",id:"create-a-pull-request",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"getting-started"},"Getting Started"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/tfaction-example/generate"},"Create a repository from this template repository")),(0,n.kt)("h2",{id:"create-required-resources-with-terraform"},"Create required resources with Terraform"),(0,n.kt)("p",null,"In the getting started, we use ",(0,n.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/terraform/language/settings/backends/s3"},"Amazon S3 as Terraform Backend"),", so AWS Account is necessary."),(0,n.kt)("p",null,"Create the following resources."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"IAM OpenID Connect provider"),(0,n.kt)("li",{parentName:"ul"},"S3 Buckets"),(0,n.kt)("li",{parentName:"ul"},"IAM Roles")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"cd aws/terraform-ci\nvi main.tf # Change local values\nterraform init\nterraform plan\nterraform apply\n")),(0,n.kt)("p",null,"After this getting started, you can clean up resources."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"terraform destroy\n")),(0,n.kt)("h2",{id:"create-a-github-app"},"Create a GitHub App"),(0,n.kt)("p",null,"Create a GitHub App and store the App id and private key to GitHub Actions Secrets."),(0,n.kt)("p",null,"Secrets"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"APP_ID"),(0,n.kt)("li",{parentName:"ul"},"APP_PRIVATE_KEY")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/tfaction/docs/config/github-token"},"Required permission")),(0,n.kt)("h2",{id:"fix-the-template-and-tfaction-rootyaml-and-workflows"},"Fix the template and tfaction-root.yaml and workflows"),(0,n.kt)("p",null,"Please search with the word ",(0,n.kt)("inlineCode",{parentName:"p"},"CHANGEME")," and fix these lines."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-console"},"$ git grep CHANGEME\n.github/workflows/apply.yaml:    branches: [dummy] # Disabled. CHANGEME Replace dummy with main\n.github/workflows/test.yaml:    if: 'false' # CHANGEME Please remove this.\ntemplates/github/terraform.tf:    region = \"us-east-1\" # CHANGEME Fix the region if necessary\ntemplates/github/terraform.tf:  owner = \"suzuki-shunsuke\" # CHANGEME Fix owner\ntfaction-root.yaml:  aws_region: ap-northeast-1 # CHANGEME Fix the region if necessary\ntfaction-root.yaml:  s3_bucket_name_plan_file: '<S3 Bucket Name for Terraform Plan File>' # CHANGEME\ntfaction-root.yaml:  s3_bucket_name_tfmigrate_history: '<S3 Bucket Name for tfmigrate history files>' # CHANGEME\ntfaction-root.yaml:    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_terraform_plan # CHANGEME\ntfaction-root.yaml:    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_tfmigrate_plan # CHANGEME\ntfaction-root.yaml:    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_terraform_apply # CHANGEME\ntfaction-root.yaml:    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_tfmigrate_apply # CHANGEME\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'git add .\ngit checkout -b update-template\ngit commit -m "update template"\ngit push origin update-template\ngh pr create -t "update template" -b "update template"\n')),(0,n.kt)("p",null,"Please merge the pull request."),(0,n.kt)("h2",{id:"scaffold-a-working-directory"},"Scaffold a working directory"),(0,n.kt)("p",null,"Please run GitHub Actions Workflow ",(0,n.kt)("inlineCode",{parentName:"p"},"scaffold-working-directory"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-console"},"$ gh workflow run scaffold-working-directory.yaml -f working_dir=github/services/yoo\n")),(0,n.kt)("p",null,"Then a pull request would be created."),(0,n.kt)("p",null,"Please merge the pull request."),(0,n.kt)("h2",{id:"create-a-pull-request"},"Create a pull request"),(0,n.kt)("p",null,"The working directory ",(0,n.kt)("inlineCode",{parentName:"p"},"github/foo")," was created.\nLet's add an issue request label with Terraform."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-console"},"$ git fetch origin main\n$ git checkout -b add-issue-label origin/main\n$ vi github/services/yoo/label.tf\n")),(0,n.kt)("p",null,"label.tf"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tf"},'resource "github_issue_label" "bar" {\n  repository  = "tfaction-example" # CHANGE\n  name        = "bar"\n  color       = "FF0000"\n  description = "bar"\n}\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-console"},'$ git add github/services/yoo/label.tf\n$ git commit -m "add an issue label"\n$ git push origin add-issue-label\n$ gh pr create -t "add an issue label" -b "add an issue label"\n')),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/13323303/152704813-35418f4d-61de-44b0-8f21-a6e84519872b.png",alt:"image"})),(0,n.kt)("p",null,"Please confirm the result of ",(0,n.kt)("inlineCode",{parentName:"p"},"terraform plan")," and merge the pull request.\nThen ",(0,n.kt)("inlineCode",{parentName:"p"},"terraform apply")," would be run in the main branch."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/13323303/152704907-3137a051-9e3a-43e5-8faa-f17e2e49f081.png",alt:"image"})))}m.isMDXComponent=!0}}]);